from unittest.mock import Mockfrom libpython_01.spam.enviador_de_email import Enviadorfrom libpython_01.spam.main import EnviadorDeSpamfrom libpython_01.spam.modelos import Usuarioimport pytestclass EnviadorMock(Enviador):    def __init__(self):        super().__init__()        self.qtd_email_enviados = 0        self.parametros_de_envio = None    def enviar(self,rementente,destinatario,assunto,corpo):        self.parametros_de_envio = (rementente,destinatario,assunto,corpo)        self.qtd_email_enviados +=1@pytest.mark.parametrize(    'usuarios',    [        [            Usuario(nome='andre',email='andresousadb@gmail.com'),            Usuario(nome='ferreira',email='andresousadb@gmail.com')        ]        ,        [            Usuario(nome='andre',email='andresousadb@gmail.com'),        ]    ])def test_qtd_de_spam(sessao,usuarios):    for usuario in usuarios:        sessao.salvar(usuario)    enviador = Mock()    enviador_spam = EnviadorDeSpam (sessao, enviador)    enviador_spam.enviar_emails(        'andresousadb@gmail.com',        'Curso teste',        'confira os mudolos'    )    assert len(usuarios) == enviador.enviar.call_countdef test_paramentros_de_spam(sessao):    usuario = Usuario(nome='Andre', email='sousa705@gmail.com')    sessao.salvar(usuario)    enviador = Mock()    enviador_de_spam = EnviadorDeSpam (sessao, enviador)    enviador_de_spam.enviar_emails(        'andresousadb@gmail.com',        'Curso teste',        'confira os mudolos'    )    enviador.enviar.assert_called_once_with(        'andresousadb@gmail.com',        'sousa705@gmail.com',        'Curso teste',        'confira os mudolos'    )